{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Cloud formation template which creates 3 EC2 instances, 2 SEC groups for the ELB and EC2s",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": 9,
            "MaxLength": 18,
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "LatestAmiId": {
            "Type": "String",
            "Default": "ami-08962a4068733a2b6"
        },
        "SubnetID1": {
            "Description": "ID of the first SubNet",
            "Type": "String"
        },
        "SubnetID2": {
            "Description": "ID of the second SubNet",
            "Type": "String"
        },
        "SubnetID3": {
            "Description": "ID of the third SubNet",
            "Type": "String"
        },
        "VPCId": {
            "Description": "ID of the VPC",
            "Type": "String"
        },
        "VPCcidr": {
            "Description": "CIDR of the VPC",
            "Type": "String"
        }
    },
    "Resources": {
        "ActiveNodes": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": "ActiveNodes",
                "AttributeDefinitions": [
                    {
                        "AttributeName": "IP",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "lastActiveTime",
                        "AttributeType": "N"
                    },
                    {
                        "AttributeName": "BackupLoadCarrier",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "IP",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "5",
                    "WriteCapacityUnits": "5"
                },
                "GlobalSecondaryIndexes": [
                    {
                        "IndexName": "gsiCaseCountTable",
                        "KeySchema": [
                            {
                                "AttributeName": "lastActiveTime",
                                "KeyType": "HASH"
                            }
                        ],
                        "Projection": {
                            "ProjectionType": "ALL"
                        },
                        "ProvisionedThroughput": {
                            "ReadCapacityUnits": "5",
                            "WriteCapacityUnits": "5"
                        }
                    }
                ]
            },
            "DependsOn": [
                "DynamoDBQueryPolicy"
            ]
        },
        "DynamoDBQueryPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "DynamoDBQueryPolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "dynamodb:*",
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "TableRole"
                    }
                ]
            }
        },
        "TableRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "dynamodb.amazonaws.com",
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "MyInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "TableRole"
                    }
                ]
            }
        },
        "ELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH access via port 22 and http access port 80",
                "VpcId": {
                    "Ref": "VPCId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ]
            }
        },
        "EC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH access via port 22 and http access to port 8080",
                "VpcId": {
                    "Ref": "VPCId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 8080,
                        "ToPort": 8080,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "SourceSecurityGroupId": {
                            "Ref": "ELBSecurityGroup"
                        }
                    }
                ]
            }
        },
        "EC2Node1": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "EC2SecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Ref": "LatestAmiId"
                },
                "IamInstanceProfile": {
                    "Ref": "MyInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\n# Workaround consistency rules in AWS roles after creation... (sleep 10)\nsleep 10\necho \"Starting setup...\"\nsudo apt -f install\nsudo apt -y update && sudo apt -y dist-upgrade\nsudo apt install git\nsudo apt -y install python3-pip\nsudo apt-get install python3-flask -y\nsudo apt -y install build-essential libssl-dev libffi-dev python3-dev\ncd /home/ubuntu\ngit clone https://github.com/Sam-M-Israel/Cloud-Computing-Assignment-2.git\necho \"Successfully cloned github codeâ€¦\"\ncd Cloud-Computing-Assignment-2\npip3 install -r requirements.txt && pip3 freeze > requirements.txt\npython3 app.py\n"
                    }
                }
            },
            "DependsOn": [
                "TableRole"
            ]
        },
        "EC2Node2": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "EC2SecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Ref": "LatestAmiId"
                },
                "IamInstanceProfile": {
                    "Ref": "MyInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\n# Workaround consistency rules in AWS roles after creation... (sleep 10)\nsleep 10\necho \"Starting setup...\"\nsudo apt -f install\nsudo apt -y update && sudo apt -y dist-upgrade\nsudo apt install git\nsudo apt -y install python3-pip\nsudo apt-get install python3-flask -y\nsudo apt -y install build-essential libssl-dev libffi-dev python3-dev\ncd /home/ubuntu\ngit clone https://github.com/Sam-M-Israel/Cloud-Computing-Assignment-2.git\necho \"Successfully cloned github codeâ€¦\"\ncd Cloud-Computing-Assignment-2\npip3 install -r requirements.txt && pip3 freeze > requirements.txt\npython3 app.py\n"
                    }
                }
            },
            "DependsOn": [
                "TableRole"
            ]
        },
        "EC2Node3": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "EC2SecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Ref": "LatestAmiId"
                },
                "IamInstanceProfile": {
                    "Ref": "MyInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash\n# Workaround consistency rules in AWS roles after creation... (sleep 10)\nsleep 10\necho \"Starting setup...\"\nsudo apt -f install\nsudo apt -y update && sudo apt -y dist-upgrade\nsudo apt install git\nsudo apt -y install python3-pip\nsudo apt-get install python3-flask -y\nsudo apt -y install build-essential libssl-dev libffi-dev python3-dev\ncd /home/ubuntu\ngit clone https://github.com/Sam-M-Israel/Cloud-Computing-Assignment-2.git\necho \"Successfully cloned github codeâ€¦\"\ncd Cloud-Computing-Assignment-2\npip3 install -r requirements.txt && pip3 freeze > requirements.txt\npython3 app.py\n"
                    }
                }
            },
            "DependsOn": [
                "TableRole"
            ]
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Name": "SamOmerELB",
                "IpAddressType": "ipv4",
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "ELBSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "SubnetID1"
                    },
                    {
                        "Ref": "SubnetID2"
                    },
                    {
                        "Ref": "SubnetID3"
                    }
                ],
                "Type": "application"
            }
        },
        "ELBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckEnabled": true,
                "HealthCheckIntervalSeconds": 10,
                "HealthCheckPath": "/health-check",
                "HealthCheckPort": 8080,
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Matcher": {
                    "HttpCode": "200"
                },
                "Name": "SamOmerTargetGroup",
                "Port": 80,
                "Protocol": "HTTP",
                "Targets": [
                    {
                        "Id": {
                            "Ref": "EC2Node1"
                        },
                        "Port": 8080
                    },
                    {
                        "Id": {
                            "Ref": "EC2Node2"
                        },
                        "Port": 8080
                    },
                    {
                        "Id": {
                            "Ref": "EC2Node3"
                        },
                        "Port": 8080
                    }
                ],
                "TargetType": "instance",
                "UnhealthyThresholdCount": 2,
                "VpcId": {
                    "Ref": "VPCId"
                }
            }
        },
        "ELBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ELBTargetGroup"
                        },
                        "Order": 100
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ElasticLoadBalancer"
                },
                "Port": 80,
                "Protocol": "HTTP"
            }
        }
    },
    "Outputs": {
        "EC2Node1ID": {
            "Description": "InstanceId of the 1st EC2 instance in the formation",
            "Value": {
                "Ref": "EC2Node1"
            }
        },
        "EC2Node1IP": {
            "Description": "Public IP address of the 1st EC2 instance in the formation",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Node1",
                    "PublicIp"
                ]
            }
        },
        "EC2Node2ID": {
            "Description": "Instance ID of the 2nd EC2 instance in the formation",
            "Value": {
                "Ref": "EC2Node2"
            }
        },
        "EC2Node2IP": {
            "Description": "Public IP address of the 2nd EC2 instance in the formation",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Node2",
                    "PublicIp"
                ]
            }
        },
        "EC2Node3ID": {
            "Description": "Instance ID of the 3rd EC2 instance in the formation",
            "Value": {
                "Ref": "EC2Node3"
            }
        },
        "EC2Node3IP": {
            "Description": "Public IP address of the 3rd EC2 instance in the formation",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Node3",
                    "PublicIp"
                ]
            }
        },
        "TargetGroup": {
            "Description": "the target group of the instances",
            "Value": {
                "Ref": "ELBTargetGroup"
            }
        },
        "LoadBalancer": {
            "Description": "Application Load Balancer",
            "Value": {
                "Ref": "ElasticLoadBalancer"
            }
        }
    }
}
